/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.6";
  static = true;
}

PARSER_BEGIN(L485Parser)
package parser;

import abstractSyntaxTree.*;
import java.util.ArrayList;
import java.util.List;

public class L485Parser
{

}

PARSER_END(L485Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "//" (~["\n","\r"])* ("\r")? "\n" >
}

TOKEN : /* Keywords */
{
  < DEFUNC : "defunc" >
| < DEFCLASS : "defclass" >
| < METHOD : "method" >
| < FUNC : "func" >
| < COND : "cond" >
| < IF : "if" >
| < THEN : "then" >
| < ELSE: "else" >
| < FI: "fi" >
| < LOAD : "load" >
| < NEW : "new" >
| < VARS: "vars" >
| < ASSIGN: "assign" >
| < TO: "to" >
| < WITH: "with" >
| < TRUE: "true" >
| < FALSE: "false" >

}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < OR : "||" >
| < AND : "&&" >
| < NOT : "!" >
| < EQUAL : "==" >
| < NOTEQUAL : "!=" >
| < LESS : "< " >
| < LESSEQUAL : "<=" >
| < GREATER: ">" >
| < GREATEREQUAL: ">=" >
| < INVOKE: "->" >
}

TOKEN :
{
  <STRING: "'"(~["'"])*"'">
| <#DIGIT: ["0" - "9"] >
| <#ALPHA: ["a" - "z"] | ["A" - "Z"] >
| <ID: <ALPHA> (<ALPHA> | <DIGIT>)*>
| <#EXPONENT: ("e" | "E") ("+" | "-")? (<DIGIT>)+ >
| <FLOATNUM: <INTNUM> (< DOT > (<DIGIT>)+ (<EXPONENT>)? | <EXPONENT>) >
| < #POSITIVE : ["1" - "9"] >
| <INTNUM: "0" | < POSITIVE > (<DIGIT>)* >
| < DOT : "." >
| < LP : "(" >
| < RP : ")" >
| < LB : "{" >
| < RB : "}" >
| < LBK: "[" >
| < RBK: "]" >
| < COMMA: "," >
}

//Suspected Good
ASTNode program():
{
	ASTNode node;
}
{
    (node = functionDef()
    {
		return new ProgramNode(node);
    }
    | node = classDef()
    {
		return new ProgramNode(node);
    }
	| node = expression()
    {
		return new ProgramNode(node);
	}
	| node = loadFile()
    {
		return new ProgramNode(node);
    })+
}
ASTNode functionDef():
{
	Token id;
	ASTNode IDListNode = null, expressionListNode;
}
{
    <DEFUNC> id = <ID> <LP> (IDListNode = idList())? <RP> expressionListNode = expressionList()
    {		return new FunctionDefNode(id.image, IDListNode, expressionListNode);
    }
}
ASTNode idList():
{
	Token id, anotherID;
	List<String> ids = new ArrayList<String>();
}
{
    id = <ID> (<COMMA> anotherID = <ID> {ids.add(anotherID.image);} )*
    {
		return new IDListNode(id.image, ids);
    }
}
ASTNode classDef():
{
	Token id;
	ASTNode classVarsNode = null, methodsNode = null;
}
{
    <DEFCLASS> id = <ID> <LB> (classVarsNode = classVars())? (methodsNode = methods())? <RB>
    {
		return new ClassDefNode(id.image, classVarsNode, methodsNode);
    }
}
ASTNode classVars():
{
	ASTNode IDListNode = null;
}
{
    <VARS> IDListNode = idList()
    {
		return new ClassVarsNode(IDListNode);
    }
}
ASTNode methods():
{
	Token id;
	ASTNode IDListNode = null, expressionListNode;
	List<ASTNode> methodsList = new ArrayList<ASTNode>();
}
{
    (<METHOD> id = <ID> <LP> (IDListNode = idList())? <RP> expressionListNode = expressionList()
    {
    	ASTNode temp = new MethodsNode(id.image, IDListNode, expressionListNode);
    	methodsList.add(temp);
    })+
    {
		return new MethodsListNode(methodsList);
    }
}
ASTNode loadFile():
{
	Token id;
}
{
    <LOAD> id = <STRING>
    {
      	return new LoadFileNode(id.image);
    }
}
ASTNode expressionList():
{
	ASTNode node;
	List<ASTNode> expressionList = new ArrayList<ASTNode>();
}
{
    <LB> (node = expression() {expressionList.add(node);} )+ <RB>
    {
		return new ExpressionListNode(expressionList);
    }
}
ASTNode expression():
{
	ASTNode node = null, left;
	List<ASTNode> expressions = new ArrayList<ASTNode>();
}
{
    left = compExpr() (node = logOp() {expressions.add(node);} node = compExpr() {expressions.add(node);} )*
    {
		return new ExpressionBinaryNode(left, expressions);
    }
    | <NOT> node = compExpr()    {		return new ExpressionUnaryNode(node);    }
}
ASTNode logOp():
{
    Token id;
}
{
    id = <OR>
    {
      return new LogOpNode(id.image);
    }
    | id = <AND>
    {
      return new LogOpNode(id.image);
    }
}
ASTNode compExpr():
{
	ASTNode node = null, left;
	List<ASTNode> expressions = new ArrayList<ASTNode>();
}
{
    left = addExpr() (node = compOp() {expressions.add(node);} node = addExpr() {expressions.add(node);} )*
    {
		return new CompExprNode(left, expressions);
    }
}
ASTNode compOp():
{
	Token id;
}
{
    id = <EQUAL>
    {		return new CompOpNode(id.image); 
    }
    | id = <NOTEQUAL>
    {
		return new CompOpNode(id.image);
    }
    | id = <LESS>
    {
		return new CompOpNode(id.image);    }
    | id = <LESSEQUAL>
    {
		return new CompOpNode(id.image);
    }
    | id = <GREATER>
    {
		return new CompOpNode(id.image);
    }
    | id = <GREATEREQUAL>
    {
		return new CompOpNode(id.image);
    }
}
ASTNode addExpr():
{
    ASTNode node, left;
    List<ASTNode> expressions = new ArrayList<ASTNode>();
}
{
    left = mulExpr() (node = addOp() {expressions.add(node);} node = mulExpr() {expressions.add(node);} )*
    {
		return new AddExprNode(left, expressions);
    }
}
ASTNode addOp():
{
    Token id;
}
{
    id = <PLUS>
    {
      return new AddOpNode(id.image);
    }
    | id = <MINUS>
    {
      return new AddOpNode(id.image);
    }
}
ASTNode mulExpr():
{
	ASTNode node, left;
	List<ASTNode> expressions = new ArrayList<ASTNode>();
}
{
    left = factor() (node = mulOp() {expressions.add(node);} node = factor() {expressions.add(node);} )*
    {
		return new MulExprNode(left, expressions);
    }
}
ASTNode mulOp():
{
    Token id;
}
{
    id = <MULTIPLY>
    {
      return new MulOpNode(id.image);
    }
    | id = <DIVIDE>
    {
      return new MulOpNode(id.image);
    }
}
ASTNode factor():
{
	ASTNode left, right = null;
}
{
    left = operand() (right = call())?
    {
		return new FactorNode(left, right);
    }
}
ASTNode operand():
{
	ASTNode node = null;
}
{
    node = varRef()    {		return new OperandNode(node);    }    |node = constant()
    {		return new OperandNode(node);
    }
    | node = newExpr()	{		return new OperandNode(node);	}    | node = ifExpr()	{		return new OperandNode(node);	}    | node = funcExpr()	{		return new OperandNode(node);	}    | node = assignExpr()	{		return new OperandNode(node);	}    | node = condExpr()	{		return new OperandNode(node);	}  	| node = withExpr()	{		return new OperandNode(node);	}    | <LP> node = expression() <RP>    {		return new OperandNode(node);    }
}
ASTNode call():
{
	ASTNode node = null;
}
{
    <INVOKE> <LP> (node = paramList())? <RP>
    {
		return new CallNode(node);
    }
}
ASTNode paramList():
{
	ASTNode node, left;
	List<ASTNode> expressions = new ArrayList<ASTNode>();
}
{
    left = expression() (<COMMA> node = expression() {expressions.add(node);} )*
    {
		return new ParamListNode(left, expressions);
    }
}
ASTNode varRef():
{
	Token id = new Token();
	Token anotherID = new Token();
}
{

    id = <ID>  (<DOT> anotherID = <ID>)?
    {		return new VarRefNode(id.image, anotherID.image);
    }
}
ASTNode constant():
{
    Token id = new Token();
	ASTNode node;
}
{
    id = <INTNUM>
    {
      	return new ConstantNode(id.image);
    }
    | id = <FLOATNUM>
    {
		return new ConstantNode(id.image);
    }
    | node = list()    {        return new ConstantNode(node);	}
    | id = <STRING>
    {
		return new ConstantNode(id.image);
    }
    | id = <TRUE>
    {
		return new ConstantNode(id.image);
    }
    | id = <FALSE>
    {
		return new ConstantNode(id.image);
    }
}
ASTNode list():
{
	ASTNode node;
}
{
    <LBK> node = constantList() <RBK>
    {
		return new ListNode(node);
    }
}
ASTNode constantList():
{
	ASTNode node = null, left;
	List<ASTNode> expressions = new ArrayList<ASTNode>();
}
{
    left = constant() (<COMMA> node = constant() {expressions.add(node);} )*
    {
		return new ConstantListNode(left, expressions);
    }
}
ASTNode newExpr():
{
	Token id = new Token();
}
{
    (      <NEW> id = <ID>
      )
    {
		return new NewExprNode(id.image);
    }
}
ASTNode ifExpr():
{
	ASTNode left, center, right;
}
{
    <IF> left = expression() <THEN> center = expression() <ELSE> right = expression() <FI>
    {
		return new IfExprNode(left, center, right);
    }
}
ASTNode funcExpr():
{
	ASTNode left = null, right;
}
{
    <FUNC> <LP> (left = idList())? <RP> right = expressionList()
    {
		return new FuncExprNode(left, right);
    }
}
ASTNode assignExpr():
{
    Token id;
	ASTNode node;
}
{
    <ASSIGN> node = expression() <TO> id = <ID>
    {
		return new AssignExprNode(node, id.image);
    }
}
ASTNode condExpr():
{
	ASTNode node;
}
{
    <COND> node = condClauses()
    {
		return new CondExprNode(node);
    }
}
ASTNode condClauses():
{
	ASTNode node;
	List<ASTNode> expressions = new ArrayList<ASTNode>();
}
{
    (<LB> node = expression() {expressions.add(node);} node = expression() {expressions.add(node);} <RB>)+
    {
		return new CondClausesNode(expressions);
    }
}
ASTNode withExpr():
{
	ASTNode left, right;
}
{
    <WITH> <LP> left = variableDefs() <RP> right = expressionList()
    {
		return new WithExprNode(left, right);
    }
}
ASTNode variableDefs():
{
    Token id;
	ASTNode node;
	List<String> ids = new ArrayList<String>();
	List<ASTNode> expressions = new ArrayList<ASTNode>();
}
{
    (<LBK> id = <ID> {ids.add(id.image);} node = expression() {expressions.add(node);} <RBK>)*
    {
		return new VariableDefsNode(ids, expressions);
    }
}
