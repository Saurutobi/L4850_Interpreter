/* Generated By:JavaCC: Do not edit this line. L485Parser.java */
package parser;

import abstractSyntaxTree.*;
import java.util.ArrayList;
import java.util.List;

public class L485Parser implements L485ParserConstants {

//Suspected Good
  static final public ASTNode program() throws ParseException {
        ASTNode node;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFUNC:
        node = functionDef();
                {if (true) return new ProgramNode(node);}
        break;
      case DEFCLASS:
        node = classDef();
                {if (true) return new ProgramNode(node);}
        break;
      case FUNC:
      case COND:
      case IF:
      case NEW:
      case ASSIGN:
      case WITH:
      case TRUE:
      case FALSE:
      case NOT:
      case STRING:
      case ID:
      case FLOATNUM:
      case INTNUM:
      case LP:
      case LBK:
        node = expression();
                {if (true) return new ProgramNode(node);}
        break;
      case LOAD:
        node = loadFile();
                {if (true) return new ProgramNode(node);}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFUNC:
      case DEFCLASS:
      case FUNC:
      case COND:
      case IF:
      case LOAD:
      case NEW:
      case ASSIGN:
      case WITH:
      case TRUE:
      case FALSE:
      case NOT:
      case STRING:
      case ID:
      case FLOATNUM:
      case INTNUM:
      case LP:
      case LBK:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode functionDef() throws ParseException {
        Token id;
        ASTNode IDListNode = null, expressionListNode;
    jj_consume_token(DEFUNC);
    id = jj_consume_token(ID);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      IDListNode = idList();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    expressionListNode = expressionList();
                {if (true) return new FunctionDefNode(id.image, IDListNode, expressionListNode);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode idList() throws ParseException {
        Token id, anotherID;
        List<String> ids = new ArrayList<String>();
    id = jj_consume_token(ID);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      anotherID = jj_consume_token(ID);
                                         ids.add(anotherID.image);
    }
                {if (true) return new IDListNode(id.image, ids);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode classDef() throws ParseException {
        Token id;
        ASTNode classVarsNode = null, methodsNode = null;
    jj_consume_token(DEFCLASS);
    id = jj_consume_token(ID);
    jj_consume_token(LB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARS:
      classVarsNode = classVars();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METHOD:
      methodsNode = methods();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RB);
                {if (true) return new ClassDefNode(id.image, classVarsNode, methodsNode);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode classVars() throws ParseException {
        ASTNode IDListNode = null;
    jj_consume_token(VARS);
    IDListNode = idList();
                {if (true) return new ClassVarsNode(IDListNode);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode methods() throws ParseException {
        Token id;
        ASTNode IDListNode = null, expressionListNode;
    label_3:
    while (true) {
      jj_consume_token(METHOD);
      id = jj_consume_token(ID);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        IDListNode = idList();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      expressionListNode = expressionList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METHOD:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
                {if (true) return new MethodsNode(id.image, IDListNode, expressionListNode);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode loadFile() throws ParseException {
        Token id;
    jj_consume_token(LOAD);
    id = jj_consume_token(STRING);
        {if (true) return new LoadFileNode(id.image);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode expressionList() throws ParseException {
        ASTNode node;
        List<ASTNode> expressionList = new ArrayList<ASTNode>();
    jj_consume_token(LB);
    label_4:
    while (true) {
      node = expression();
                               expressionList.add(node);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNC:
      case COND:
      case IF:
      case NEW:
      case ASSIGN:
      case WITH:
      case TRUE:
      case FALSE:
      case NOT:
      case STRING:
      case ID:
      case FLOATNUM:
      case INTNUM:
      case LP:
      case LBK:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(RB);
                {if (true) return new ExpressionListNode(expressionList);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode expression() throws ParseException {
        ASTNode node = null;
        ASTNode left;
        List<ASTNode> expressions = new ArrayList<ASTNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC:
    case COND:
    case IF:
    case NEW:
    case ASSIGN:
    case WITH:
    case TRUE:
    case FALSE:
    case STRING:
    case ID:
    case FLOATNUM:
    case INTNUM:
    case LP:
    case LBK:
      left = compExpr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
        case AND:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        node = logOp();
                                      expressions.add(node);
        node = compExpr();
                                                                                expressions.add(node);
      }
                {if (true) return new ExpressionBinaryNode(left, expressions);}
      break;
    case NOT:
      jj_consume_token(NOT);
      node = compExpr();
                {if (true) return new ExpressionUnaryNode(node);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode logOp() throws ParseException {
        ASTNode node;
        Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      id = jj_consume_token(OR);
      node = new LogOpNode(id.image);
      {if (true) return node;}
      break;
    case AND:
      id = jj_consume_token(AND);
      node = new LogOpNode(id.image);
      {if (true) return node;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode compExpr() throws ParseException {
        ASTNode node;
    addExpr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOTEQUAL:
      case LESS:
      case LESSEQUAL:
      case GREATER:
      case GREATEREQUAL:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      compOp();
      addExpr();
    }
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode compOp() throws ParseException {
        Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      id = jj_consume_token(EQUAL);
                {if (true) return new CompOpNode(id.image);}
      break;
    case NOTEQUAL:
      id = jj_consume_token(NOTEQUAL);
                {if (true) return new CompOpNode(id.image);}
      break;
    case LESS:
      id = jj_consume_token(LESS);
                {if (true) return new CompOpNode(id.image);}
      break;
    case LESSEQUAL:
      id = jj_consume_token(LESSEQUAL);
                {if (true) return new CompOpNode(id.image);}
      break;
    case GREATER:
      id = jj_consume_token(GREATER);
                {if (true) return new CompOpNode(id.image);}
      break;
    case GREATEREQUAL:
      id = jj_consume_token(GREATEREQUAL);
                {if (true) return new CompOpNode(id.image);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode addExpr() throws ParseException {
        ASTNode leftNode, rightNode;
        Token id;
    leftNode = mulExpr();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        id = jj_consume_token(PLUS);
        rightNode = mulExpr();
        break;
      case MINUS:
        id = jj_consume_token(MINUS);
        rightNode = mulExpr();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }

  }

//this node needs to look similar to the above node
  static final public ASTNode mulExpr() throws ParseException {
        ASTNode node;
    node = factor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        factor();
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        factor();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode factor() throws ParseException {
        ASTNode node;
    operand();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INVOKE:
      call();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode operand() throws ParseException {
        ASTNode node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      node = varRef();
                {if (true) return node;}
      break;
    case TRUE:
    case FALSE:
    case STRING:
    case FLOATNUM:
    case INTNUM:
    case LBK:
      node = constant();
                {if (true) return node;}
      break;
    case NEW:
      node = newExpr();
                {if (true) return node;}
      break;
    case IF:
      node = ifExpr();
                {if (true) return node;}
      break;
    case FUNC:
      node = funcExpr();
                {if (true) return node;}
      break;
    case ASSIGN:
      node = assignExpr();
                {if (true) return node;}
      break;
    case COND:
      node = condExpr();
                {if (true) return node;}
      break;
    case WITH:
      node = withExpr();
                {if (true) return node;}
      break;
    case LP:
      jj_consume_token(LP);
      node = expression();
      jj_consume_token(RP);
                {if (true) return node;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode call() throws ParseException {
        ASTNode node;
    jj_consume_token(INVOKE);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC:
    case COND:
    case IF:
    case NEW:
    case ASSIGN:
    case WITH:
    case TRUE:
    case FALSE:
    case NOT:
    case STRING:
    case ID:
    case FLOATNUM:
    case INTNUM:
    case LP:
    case LBK:
      paramList();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(RP);
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode paramList() throws ParseException {
        ASTNode node;
    expression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      expression();
    }
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode varRef() throws ParseException {
        ASTNode node;
        Token firstID = null;
        Token secondID = null;
    firstID = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      secondID = jj_consume_token(ID);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                {if (true) return new VarRefNode(firstID.image, secondID.image);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode constant() throws ParseException {
        ASTNode node;
        Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTNUM:
      id = jj_consume_token(INTNUM);

      break;
    case FLOATNUM:
      id = jj_consume_token(FLOATNUM);

      break;
    case LBK:
      node = list();

      break;
    case STRING:
      id = jj_consume_token(STRING);

      break;
    case TRUE:
      id = jj_consume_token(TRUE);

      break;
    case FALSE:
      id = jj_consume_token(FALSE);

      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public ASTNode list() throws ParseException {
        ASTNode node;
    jj_consume_token(LBK);
    constantList();
    jj_consume_token(RBK);
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode constantList() throws ParseException {
        ASTNode node;
    constant();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      constant();
    }
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode newExpr() throws ParseException {
        ASTNode node;
    jj_consume_token(NEW);
    jj_consume_token(ID);
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode ifExpr() throws ParseException {
        ASTNode left, center, right;
        IfExprNode node;
    jj_consume_token(IF);
    left = expression();
    jj_consume_token(THEN);
    center = expression();
    jj_consume_token(ELSE);
    right = expression();
    jj_consume_token(FI);
        node = new IfExprNode(left,center,right);
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode funcExpr() throws ParseException {
        ASTNode left, right;
        left = null;
    jj_consume_token(FUNC);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      left = idList();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    right = expressionList();
                {if (true) return new FuncExprNode(left,right);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode assignExpr() throws ParseException {
        ASTNode node;
    jj_consume_token(ASSIGN);
    expression();
    jj_consume_token(TO);
    jj_consume_token(ID);
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode condExpr() throws ParseException {
        ASTNode node;
    jj_consume_token(COND);
    condClauses();
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode condClauses() throws ParseException {
        ASTNode left, right = null;
    label_11:
    while (true) {
      jj_consume_token(LB);
      left = expression();
      right = expression();
      jj_consume_token(RB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LB:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_11;
      }
    }
                {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode withExpr() throws ParseException {
        ASTNode node;
    jj_consume_token(WITH);
    jj_consume_token(LP);
    variableDefs();
    jj_consume_token(RP);
    expressionList();
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode variableDefs() throws ParseException {
        ASTNode node;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBK:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_12;
      }
      jj_consume_token(LBK);
      jj_consume_token(ID);
      expression();
      jj_consume_token(RBK);
    }
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public L485ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20758ec0,0x20758ec0,0x0,0x0,0x20000,0x100,0x0,0x100,0x20750e00,0x18000000,0x20750e00,0x18000000,0xc0000000,0xc0000000,0x1800000,0x1800000,0x6000000,0x6000000,0x0,0x750e00,0x20750e00,0x0,0x0,0x600000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x45520,0x45520,0x100,0x100000,0x0,0x0,0x100,0x0,0x45520,0x0,0x45520,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x10,0x45520,0x45520,0x100000,0x2000,0x41420,0x100000,0x100,0x10000,0x40000,};
   }

  /** Constructor with InputStream. */
  public L485Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public L485Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new L485ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public L485Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new L485ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public L485Parser(L485ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(L485ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
