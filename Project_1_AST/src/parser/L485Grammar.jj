/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.6";
  static = true;
}

PARSER_BEGIN(L485Parser)
package parser;

public class L485Parser
{

}

PARSER_END(L485Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "//" (~["\n","\r"])* ("\r")? "\n" >
}

TOKEN : /* Keywords */
{
  < DEFUNC : "defunc" >
| < DEFCLASS : "defclass" >
| < METHOD : "method" >
| < FUNC : "func" >
| < COND : "cond" >
| < IF : "if" >
| < THEN : "then" >
| < ELSE: "else" >
| < FI: "fi" >
| < LOAD : "load" >
| < NEW : "new" >
| < VARS: "vars" >
| < ASSIGN: "assign" >
| < TO: "to" >
| < WITH: "with" >
| < TRUE: "true" >
| < FALSE: "false" >

}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < OR : "||" >
| < AND : "&&" >
| < NOT : "!" >
| < EQUAL : "==" >
| < NOTEQUAL : "!=" >
| < LESS : "< " >
| < LESSEQUAL : "<=" >
| < GREATER: ">" >
| < GREATEREQUAL: ">=" >
| < INVOKE: "->" >
}

TOKEN :
{
  <STRING: "'"(~["'"])*"'">
| <#DIGIT: ["0" - "9"] >
| <#ALPHA: ["a" - "z"] | ["A" - "Z"] >
| <ID: <ALPHA> (<ALPHA> | <DIGIT>)*>
| <#EXPONENT: ("e" | "E") ("+" | "-")? (<DIGIT>)+ >
| <FLOATNUM: <INTNUM> (< DOT > (<DIGIT>)+ (<EXPONENT>)? | <EXPONENT>) >
| < #POSITIVE : ["1" - "9"] >
| <INTNUM: "0" | < POSITIVE > (<DIGIT>)* >
| < DOT : "." >
| < LP : "(" >
| < RP : ")" >
| < LB : "{" >
| < RB : "}" >
| < LBK: "[" >
| < RBK: "]" >
| < COMMA: "," >
}

void program():
{}
{
    (functionDef()
    |
    classDef()
	|
	expression()
	|
    loadFile())+
}
void functionDef():
{}
{
    <DEFUNC> <ID> <LP> (idList())? <RP> expressionList()
}
void idList():
{}
{
    <ID> (<COMMA> <ID>)*
}
void classDef():
{}
{
    <DEFCLASS> <ID> <LB> (classVar())? (methods())? <RB>
}
void classVar():
{}
{
    <VARS> idList()
}
void methods():
{}
{
    (<METHOD> <ID> <LP> (idList())? <RP> expressionList())+
}
void loadFile():
{}
{
    <LOAD> <STRING>
}
void expressionList():
{}
{
    <LB> (expression())+ <RB>
}
void expression():
{}
{
    compExpr() (logOp() compExpr())*
    |
    <NOT> compExpr()
}
void logOp():
{}
{
    <OR>
    |
    <AND>
}
void compExpr():
{}
{
    addExpr() (compOp() addExpr())*
}
void compOp():
{}
{
    <EQUAL>
    |
    <NOTEQUAL>
    |
    <LESS>
    |
    <LESSEQUAL>
    |
    <GREATER>
    |
    <GREATEREQUAL>
}
void addExpr():
{}
{
    mulExpr() (addOp() mulExpr())*
}
void addOp():
{}
{
    <PLUS>
    |
    <MINUS>
}
void mulExpr():
{}
{
    factor() (mulOp() factor())*
}
void mulOp():
{}
{
    <MULTIPLY>
    |
    <DIVIDE>
}
void factor():
{}
{
    operand() (call())?
}
void operand():
{}
{
    varRef()
    |
    constant()
    |
    newExpr()
    |
    ifExpr()
    |
    funcExpr()
    |
    assignExpr()
    |
    condExpr()
    |
    withExpr()
    |
    <LP> expression() <RP>
}
void call():
{}
{
    <INVOKE> <LP> (paramList())? <RP>
}
void paramList():
{}
{
    expression() (<COMMA> expression())*
}
void varRef():
{}
{
    <ID> (<DOT> <ID>)?
}
void constant():
{}
{
    <INTNUM>
    |
    <FLOATNUM>
    |
    list()
    |
    <STRING>
    |
    <TRUE>
    |
    <FALSE>
}
void list():
{}
{
    <LBK> constantList() <RBK>
}
void constantList():
{}
{
    constant() (<COMMA> constant())*
}
void newExpr():
{}
{
    <NEW> <ID>
}
void ifExpr():
{}
{
    <IF> expression() <THEN> expression() <ELSE> expression() <FI>
}
void funcExpr():
{}
{
    <FUNC> <LP> (idList())? <RP> expressionList()
}
void assignExpr():
{}
{
    <ASSIGN> expression() <TO> <ID>
}
void condExpr():
{}
{
    <COND> condClauses()
}
void condClauses():
{}
{
    (<LB> expression() expression() <RB>)+
}
void withExpr():
{}
{
    <WITH> <LP> variableDefs() <RP> expressionList()
}
void variableDefs():
{}
{
    (<LBK> <ID> expression() <RBK>)*
}
