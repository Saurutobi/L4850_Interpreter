/* Generated By:JavaCC: Do not edit this line. L485Parser.java */
package parser;

import ast.*;
import java.util.ArrayList;
import java.util.HashMap;

public class L485Parser implements L485ParserConstants {

  static final public ASTNodeList program() throws ParseException {
   ASTNodeList ast = new ASTNodeList();
   ASTNode fd,cd,lf,expr;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFUNC:
        fd = functionDef();
                        ast.add(fd);
        break;
      case DEFCLASS:
        cd = classDef();
                        ast.add(cd);
        break;
      case LOAD:
        lf = loadFile();
                        ast.add(lf);
        break;
      case FUNC:
      case COND:
      case IF:
      case NEW:
      case ASSIGN:
      case WITH:
      case TRUE:
      case FALSE:
      case NOT:
      case STRING:
      case ID:
      case FLOATNUM:
      case INTNUM:
      case LP:
      case LBK:
        expr = expression();
            ast.add(expr);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFUNC:
      case DEFCLASS:
      case FUNC:
      case COND:
      case IF:
      case LOAD:
      case NEW:
      case ASSIGN:
      case WITH:
      case TRUE:
      case FALSE:
      case NOT:
      case STRING:
      case ID:
      case FLOATNUM:
      case INTNUM:
      case LP:
      case LBK:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    {if (true) return ast;}
    throw new Error("Missing return statement in function");
  }

  static final public DefuncNode functionDef() throws ParseException {
   ArrayList<String> arglist = new ArrayList<String>();
   ASTNodeList body = new ASTNodeList();
   ASTNode expr;
   Token name,arg;
    jj_consume_token(DEFUNC);
    name = jj_consume_token(ID);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      arg = jj_consume_token(ID);
             arglist.add(arg.image);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        arg = jj_consume_token(ID);
             arglist.add(arg.image);
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    body = expressionList();
     {if (true) return new DefuncNode(name.image,arglist,body);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassNode classDef() throws ParseException {
  ArrayList<String > cv = new ArrayList<String >();
  ASTNodeList mth = new ASTNodeList();
  Token id;
    jj_consume_token(DEFCLASS);
    id = jj_consume_token(ID);
    jj_consume_token(LB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARS:
      cv = classVars();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METHOD:
      mth = methods();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RB);
        {if (true) return new ClassNode(id.image,cv,mth);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String > classVars() throws ParseException {
        ArrayList<String > list = new ArrayList<String >();
        Token id;
    jj_consume_token(VARS);
    id = jj_consume_token(ID);
            list.add(id.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      id = jj_consume_token(ID);
                list.add(id.image);
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNodeList methods() throws ParseException {
        ASTNodeList list = new ASTNodeList();
        ArrayList<String > paramlist;
        ASTNodeList body;
        ASTNode expr;
        Token name,id;
    label_4:
    while (true) {
      jj_consume_token(METHOD);
      name = jj_consume_token(ID);
        paramlist = new ArrayList<String >();
        body = new ASTNodeList();
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        id = jj_consume_token(ID);
             paramlist.add(id.image);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          id = jj_consume_token(ID);
             paramlist.add(id.image);
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      body = expressionList();
                        list.add(new MethodNode(name.image,paramlist,body));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METHOD:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public LoadNode loadFile() throws ParseException {
  Token str;
    jj_consume_token(LOAD);
    str = jj_consume_token(STRING);
    {if (true) return new LoadNode(str.image);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode expression() throws ParseException {
  ASTNode rexpr,ast;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC:
    case COND:
    case IF:
    case NEW:
    case ASSIGN:
    case WITH:
    case TRUE:
    case FALSE:
    case STRING:
    case ID:
    case FLOATNUM:
    case INTNUM:
    case LP:
    case LBK:
      ast = simpleExpr();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
        case AND:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          jj_consume_token(OR);
          rexpr = simpleExpr();
        ast = new OrNode(ast,rexpr);
          break;
        case AND:
          jj_consume_token(AND);
          rexpr = simpleExpr();
        ast = new AndNode(ast,rexpr);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case NOT:
      jj_consume_token(NOT);
      rexpr = simpleExpr();
        ast = new NotNode(rexpr);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return ast;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode simpleExpr() throws ParseException {
  ASTNode rexpr, ast;
    ast = addExpr();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOTEQUAL:
      case LESS:
      case LESSEQUAL:
      case GREATER:
      case GREATEREQUAL:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        rexpr = addExpr();
          ast = new EqualNode(ast,rexpr);
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
        rexpr = addExpr();
      ast = new NotEqualNode(ast,rexpr);
        break;
      case LESS:
        jj_consume_token(LESS);
        rexpr = addExpr();
      ast = new LessNode(ast,rexpr);
        break;
      case LESSEQUAL:
        jj_consume_token(LESSEQUAL);
        rexpr = addExpr();
      ast = new LessEqualNode(ast,rexpr);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        rexpr = addExpr();
      ast = new GreaterNode(ast,rexpr);
        break;
      case GREATEREQUAL:
        jj_consume_token(GREATEREQUAL);
        rexpr = addExpr();
      ast = new GreaterEqualNode(ast,rexpr);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return ast;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode addExpr() throws ParseException {
  ASTNode rexpr,ast;
    ast = mulExpr();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        rexpr = mulExpr();
      ast = new AddNode(ast,rexpr);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        rexpr = mulExpr();
      ast = new SubNode(ast,rexpr);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return ast;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode mulExpr() throws ParseException {
  ASTNode rexpr,ast;
    ast = factor();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        rexpr = factor();
       ast = new MultiplyNode(ast,rexpr);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        rexpr = factor();
       ast = new DivideNode(ast,rexpr);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return ast;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode factor() throws ParseException {
  Token var,method,className,id;
  ASTNode ast,testExpr,thenExpr,elseExpr,expr,body;
  ArgumentListNode fp=null;
  ASTNodeList clauses;
  ArrayList<String > paramList;
  HashMap<String,ASTNode > varDefs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      var = jj_consume_token(ID);
      ast = new VarrefNode(var.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        method = jj_consume_token(ID);
          ast = new MethodrefNode(var.image,method.image);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    case TRUE:
    case FALSE:
    case STRING:
    case FLOATNUM:
    case INTNUM:
    case LBK:
      ast = constant();
      break;
    case NEW:
      jj_consume_token(NEW);
      className = jj_consume_token(ID);
        ast = new NewNode(className.image);
      break;
    case IF:
      jj_consume_token(IF);
      testExpr = expression();
      jj_consume_token(THEN);
      thenExpr = expression();
      jj_consume_token(ELSE);
      elseExpr = expression();
      jj_consume_token(FI);
          ast = new IfNode(testExpr,thenExpr,elseExpr);
      break;
    case FUNC:
      jj_consume_token(FUNC);
      jj_consume_token(LP);
          paramList = new ArrayList<String >();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        id = jj_consume_token(ID);
          paramList.add(id.image);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          id = jj_consume_token(ID);
                  paramList.add(id.image);
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      body = expressionList();
                ast = new FuncNode(paramList,body);
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expr = expression();
      jj_consume_token(TO);
      id = jj_consume_token(ID);
                ast = new AssignNode(id.image,expr);
      break;
    case COND:
      jj_consume_token(COND);
      clauses = cond_clauses();
                ast = new CondNode(clauses);
      break;
    case WITH:
      jj_consume_token(WITH);
      jj_consume_token(LP);
      varDefs = variableDefs();
      jj_consume_token(RP);
      body = expressionList();
          ast = new WithNode(varDefs,body);
      break;
    case LP:
      jj_consume_token(LP);
      ast = expression();
      jj_consume_token(RP);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    fp = factor_prime();
                if (fp != null)
                   ast = new CallNode(ast,fp);
    {if (true) return ast;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode constant() throws ParseException {
  Token con;
  ASTNode expr,list;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTNUM:
      con = jj_consume_token(INTNUM);
                expr = new IntegerNode(Integer.valueOf(con.image));
      break;
    case FLOATNUM:
      con = jj_consume_token(FLOATNUM);
                expr = new FloatNode(Float.valueOf(con.image));
      break;
    case LBK:
      expr = list_expression();
      break;
    case STRING:
      con = jj_consume_token(STRING);
                expr = new StringNode(con.image.substring(1,con.image.length()-1));
      break;
    case TRUE:
      jj_consume_token(TRUE);
  expr = new BooleanNode(true);
      break;
    case FALSE:
      jj_consume_token(FALSE);
  expr = new BooleanNode(false);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNodeList expressionList() throws ParseException {
  ASTNodeList astList = new ASTNodeList();
  ASTNode expr;
    jj_consume_token(LB);
    label_11:
    while (true) {
      expr = expression();
          astList.add(expr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNC:
      case COND:
      case IF:
      case NEW:
      case ASSIGN:
      case WITH:
      case TRUE:
      case FALSE:
      case NOT:
      case STRING:
      case ID:
      case FLOATNUM:
      case INTNUM:
      case LP:
      case LBK:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(RB);
    {if (true) return astList;}
    throw new Error("Missing return statement in function");
  }

  static final public HashMap<String,ASTNode > variableDefs() throws ParseException {
        HashMap<String,ASTNode > defMap = new HashMap<String,ASTNode >();
        Token var;
        ASTNode expr;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBK:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
      jj_consume_token(LBK);
      var = jj_consume_token(ID);
      expr = expression();
      jj_consume_token(RBK);
      defMap.put(var.image,expr);
    }
    {if (true) return defMap;}
    throw new Error("Missing return statement in function");
  }

  static final public ListNode list_expression() throws ParseException {
  ASTNode expr;
  ArrayList<ASTNode > list = new ArrayList<ASTNode >();
    jj_consume_token(LBK);
    expr = constant();
        list.add(expr);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      expr = constant();
        list.add(expr);
    }
    jj_consume_token(RBK);
        {if (true) return new ListNode(list);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNodeList cond_clauses() throws ParseException {
 ASTNodeList ast = new ASTNodeList();
 ASTNode condition,action;
    label_14:
    while (true) {
      jj_consume_token(LB);
      condition = expression();
      action = expression();
      jj_consume_token(RB);
                        ast.add(new CondClauseNode(condition,action));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LB:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_14;
      }
    }
          {if (true) return ast;}
    throw new Error("Missing return statement in function");
  }

  static final public ArgumentListNode factor_prime() throws ParseException {
  ArgumentListNode ast;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INVOKE:
      jj_consume_token(INVOKE);
      jj_consume_token(LP);
      ast = paramList();
      jj_consume_token(RP);
      break;
    default:
      jj_la1[28] = jj_gen;
    ast = null;
    }
    {if (true) return ast;}
    throw new Error("Missing return statement in function");
  }

  static final public ArgumentListNode paramList() throws ParseException {
  ArgumentListNode ast = new ArgumentListNode();
  ASTNode expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC:
    case COND:
    case IF:
    case NEW:
    case ASSIGN:
    case WITH:
    case TRUE:
    case FALSE:
    case NOT:
    case STRING:
    case ID:
    case FLOATNUM:
    case INTNUM:
    case LP:
    case LBK:
      expr = expression();
                ast.add(expr);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        expr = expression();
                ast.add(expr);
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
          {if (true) return ast;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public L485ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20758ec0,0x20758ec0,0x0,0x0,0x20000,0x100,0x0,0x0,0x0,0x100,0x18000000,0x18000000,0x20750e00,0xc0000000,0xc0000000,0x1800000,0x1800000,0x6000000,0x6000000,0x0,0x0,0x0,0x750e00,0x600000,0x20750e00,0x0,0x0,0x0,0x0,0x0,0x20750e00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x45520,0x45520,0x100000,0x100,0x0,0x0,0x100000,0x100000,0x100,0x0,0x0,0x0,0x45520,0xf,0xf,0x0,0x0,0x0,0x0,0x2000,0x100000,0x100,0x45520,0x41420,0x45520,0x40000,0x100000,0x10000,0x10,0x100000,0x45520,};
   }

  /** Constructor with InputStream. */
  public L485Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public L485Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new L485ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public L485Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new L485ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public L485Parser(L485ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(L485ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
